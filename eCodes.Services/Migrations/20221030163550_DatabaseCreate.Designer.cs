// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCodes.Services.Database;

#nullable disable

namespace eCodes.Services.Migrations
{
    [DbContext(typeof(_210331Context))]
    [Migration("20221030163550_DatabaseCreate")]
    partial class DatabaseCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eCodes.Services.Database.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyerId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BuyerId");

                    b.HasIndex(new[] { "PersonId" }, "IX_Buyers_PersonID");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("eCodes.Services.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.HasIndex(new[] { "CountryId" }, "IX_Cities_CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("eCodes.Services.Database.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("eCodes.Services.Database.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("eCodes.Services.Database.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<DateTime>("DateOfEmployement")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Employees_OrderID");

                    b.HasIndex(new[] { "PersonId" }, "IX_Employees_PersonID");

                    b.HasIndex(new[] { "ProductId" }, "IX_Employees_ProductID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("eCodes.Services.Database.LoyaltyPoint", b =>
                {
                    b.Property<int>("LoyaltyPointsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoyaltyPointsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoyaltyPointsId"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.HasKey("LoyaltyPointsId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_LoyaltyPoints_BuyerID");

                    b.ToTable("LoyaltyPoints");
                });

            modelBuilder.Entity("eCodes.Services.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<DateTime>("NotificationDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificationDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("NotificationId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Notifications_BuyerID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("eCodes.Services.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<bool?>("Canceled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Orders_BuyerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eCodes.Services.Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderItems_OrderID");

                    b.HasIndex(new[] { "ProductId" }, "IX_OrderItems_ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("eCodes.Services.Database.Output", b =>
                {
                    b.Property<int>("OutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OutputID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutputId"), 1L, 1);

                    b.Property<decimal>("AmountWithTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<bool>("Concluded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OutputId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Outputs_BuyerID");

                    b.HasIndex(new[] { "OrderId" }, "IX_Outputs_OrderID");

                    b.ToTable("Outputs");
                });

            modelBuilder.Entity("eCodes.Services.Database.OutputItem", b =>
                {
                    b.Property<int>("OutputItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OutputItemsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutputItemsId"), 1L, 1);

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("OutputId")
                        .HasColumnType("int")
                        .HasColumnName("OutputID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.HasKey("OutputItemsId");

                    b.HasIndex(new[] { "OutputId" }, "IX_OutputItems_OutputID");

                    b.HasIndex(new[] { "ProductId" }, "IX_OutputItems_ProductID");

                    b.HasIndex(new[] { "SellerId" }, "IX_OutputItems_SellerID");

                    b.ToTable("OutputItems");
                });

            modelBuilder.Entity("eCodes.Services.Database.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Jmbg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("JMBG");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PersonId");

                    b.HasIndex(new[] { "CityId" }, "IX_Persons_CityID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("eCodes.Services.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GiftCardKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PictureThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "ProductTypeId" }, "IX_Products_ProductTypeID");

                    b.HasIndex(new[] { "SellerId" }, "IX_Products_SellerID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eCodes.Services.Database.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeId"), 1L, 1);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CurrencyID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductTypeId");

                    b.HasIndex(new[] { "CurrencyId" }, "IX_ProductTypes_CurrencyID");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("eCodes.Services.Database.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Mark")
                        .HasColumnType("decimal(18,1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    b.HasKey("RatingId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Ratings_BuyerID");

                    b.HasIndex(new[] { "ProductId" }, "IX_Ratings_ProductID");

                    b.HasIndex(new[] { "SellerId" }, "IX_Ratings_SellerID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("eCodes.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("eCodes.Services.Database.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SellerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PayPalEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SellerId");

                    b.HasIndex(new[] { "PersonId" }, "IX_Sellers_PersonID");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("eCodes.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "PersonId" }, "IX_Users_PersonID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("eCodes.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRoles_RoleID");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRoles_UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("eCodes.Services.Database.Buyer", b =>
                {
                    b.HasOne("eCodes.Services.Database.Person", "Person")
                        .WithMany("Buyers")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Buyers_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("eCodes.Services.Database.City", b =>
                {
                    b.HasOne("eCodes.Services.Database.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Cities_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eCodes.Services.Database.Employee", b =>
                {
                    b.HasOne("eCodes.Services.Database.Order", "Order")
                        .WithMany("Employees")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Employees_Orders");

                    b.HasOne("eCodes.Services.Database.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Persons");

                    b.HasOne("eCodes.Services.Database.Product", "Product")
                        .WithMany("Employees")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Employees_Products");

                    b.Navigation("Order");

                    b.Navigation("Person");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCodes.Services.Database.LoyaltyPoint", b =>
                {
                    b.HasOne("eCodes.Services.Database.Buyer", "Buyer")
                        .WithMany("LoyaltyPoints")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_LoyaltyPoints_Buyers");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("eCodes.Services.Database.Notification", b =>
                {
                    b.HasOne("eCodes.Services.Database.Buyer", "Buyer")
                        .WithMany("Notifications")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Buyers");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("eCodes.Services.Database.Order", b =>
                {
                    b.HasOne("eCodes.Services.Database.Buyer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Buyers");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("eCodes.Services.Database.OrderItem", b =>
                {
                    b.HasOne("eCodes.Services.Database.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.HasOne("eCodes.Services.Database.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCodes.Services.Database.Output", b =>
                {
                    b.HasOne("eCodes.Services.Database.Buyer", "Buyer")
                        .WithMany("Outputs")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Outputs_Buyers");

                    b.HasOne("eCodes.Services.Database.Order", "Order")
                        .WithMany("Outputs")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Outputs_Orders");

                    b.Navigation("Buyer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("eCodes.Services.Database.OutputItem", b =>
                {
                    b.HasOne("eCodes.Services.Database.Output", "Output")
                        .WithMany("OutputItems")
                        .HasForeignKey("OutputId")
                        .IsRequired()
                        .HasConstraintName("FK_OutputItems_Outputs");

                    b.HasOne("eCodes.Services.Database.Product", "Product")
                        .WithMany("OutputItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OutputItems_Products");

                    b.HasOne("eCodes.Services.Database.Seller", "Seller")
                        .WithMany("OutputItems")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_OutputItems_Sellers");

                    b.Navigation("Output");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("eCodes.Services.Database.Person", b =>
                {
                    b.HasOne("eCodes.Services.Database.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Persons_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("eCodes.Services.Database.Product", b =>
                {
                    b.HasOne("eCodes.Services.Database.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_ProductTypes");

                    b.HasOne("eCodes.Services.Database.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_Products_Sellers");

                    b.Navigation("ProductType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("eCodes.Services.Database.ProductType", b =>
                {
                    b.HasOne("eCodes.Services.Database.Currency", "Currency")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTypes_Currencies");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("eCodes.Services.Database.Rating", b =>
                {
                    b.HasOne("eCodes.Services.Database.Buyer", "Buyer")
                        .WithMany("Ratings")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Buyers");

                    b.HasOne("eCodes.Services.Database.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Products");

                    b.HasOne("eCodes.Services.Database.Seller", "Seller")
                        .WithMany("Ratings")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Sellers");

                    b.Navigation("Buyer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("eCodes.Services.Database.Seller", b =>
                {
                    b.HasOne("eCodes.Services.Database.Person", "Person")
                        .WithMany("Sellers")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Sellers_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("eCodes.Services.Database.User", b =>
                {
                    b.HasOne("eCodes.Services.Database.Person", "Person")
                        .WithMany("Users")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Persons");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("eCodes.Services.Database.UserRole", b =>
                {
                    b.HasOne("eCodes.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("eCodes.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCodes.Services.Database.Buyer", b =>
                {
                    b.Navigation("LoyaltyPoints");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Outputs");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("eCodes.Services.Database.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("eCodes.Services.Database.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("eCodes.Services.Database.Currency", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("eCodes.Services.Database.Order", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OrderItems");

                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("eCodes.Services.Database.Output", b =>
                {
                    b.Navigation("OutputItems");
                });

            modelBuilder.Entity("eCodes.Services.Database.Person", b =>
                {
                    b.Navigation("Buyers");

                    b.Navigation("Employees");

                    b.Navigation("Sellers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("eCodes.Services.Database.Product", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OrderItems");

                    b.Navigation("OutputItems");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("eCodes.Services.Database.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCodes.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("eCodes.Services.Database.Seller", b =>
                {
                    b.Navigation("OutputItems");

                    b.Navigation("Products");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("eCodes.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
